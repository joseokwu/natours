.learnt {
  // Used to clip a elements along certain axis.. use website "clippy" to get random clips
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  -webkit-clip-path: circle(50% at 50% 50%);
  clip-path: circle(50% at 50% 50%);

  // clip a background color to a text, so the text can have eg, the linear gradient of the background
  -webkit-background-clip: text;
  color: transparent;

  // the :not selector is used to select everything but the attribute in the 'not' bracket
  &:hover &_photo:not(:hover) {
    transform: scale(0.9);
  }
  &_photo:not(:last-child) {
  }

  // used to give the element an outline(similar to a border) but then push it further away or into the element
  outline-offset: 2rem;
  outline: 1.5rem solid $color-primary;

  // used to skew a container a certain degrees and then skew all the containers elements back to normal, so only the container looks skewed
  transform: skewY(-7deg);
  & > * {
    transform: skewY(7deg);
  }

  // used to make an element seem like its coming towards you. especially if used on rotate
  perspective: 150rem;
  -moz-perspective: 150rem;

  //hide the backface of an element and  used to fix issues with transitions glitch
  backface-visibility: hidden;

  // breaks an elements fragments(texts) across multiple lines, making it seem like each line is its own element
  -webkit-box-decoration-break: clone;
  box-decoration-break: clone;

  // blends the background(image) and the gradient to look a certain kind of way
  background-blend-mode: screen;

  // used to shape the elements(text) around and object in a circular fashion.. have to float the object first and give it a height and width
  -webkit-shape-outside: circle(50% at 50% 50%);
  shape-outside: circle(50% at 50% 50%);

  // used to blur or brighten or apply other filters to an element
  filter: blur(3px) brightness(80%);

  // when element is focused
  &:focus {
    outline: none;
    box-shadow: 0 1rem 2rem rgba($color-black, $alpha: 0.1);
    border-bottom: 3px solid $color-primary;
  }

  //when the input typed in the input box does not meet the requirement
  &:focus:invalid {
    border-bottom: 3px solid $color-secondary-dark;
  }

  // target the placeholder
  &::-webkit-input-placeholder {
    color: $color-grey-dark-2;
  }

  // for selection specific sibling not directly next to it
  &__input:placeholder-shown ~ &__label {
  }

  //for selecting next sibling
  &__input:placeholder-shown + &__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }

  // sample of long selector
  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }

  // used to slice the background color at a certain angle
  .book {
    background-image: linear-gradient(
        105deg,
        rgba($color-white, 0.9) 0%,
        rgba($color-white, 0.9) 50%,
        transparent 50%
      ),
      url(../img/nat-10.jpg);
  }

  // giving the parent display: table and the siblings display: table-cell treats it like a table and ensures the cells have the same height
  .ddf {
    display: table;
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    transition: all 0.5s 0.2s;
  }

  &__left {
    width: 33.333333%;
    display: table-cell;
  }

  &__right {
    width: 66.6666667%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;
  }

  //column-count creates columns, column gap divides the columns, rule gives a border line inbetween
  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid $color-grey-light-2;

    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid $color-grey-light-2;

    // hyphens hyphenate text when they enter another line
    -ms-hyphens: auto;
    -moz-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
  }

  // :target triggers when a link to a href target is clicked
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  // cubic-bezier determines the transition movement(ease-in, ease-out etc). website cubic-bezier.com and easing.co
  transition: transform 0.8s cubic-bezier(0.83, 0, 0.17, 1);

  // animations
  @keyframes moveInLeft {
    0% {
      opacity: 0;
      transform: translateX(-100%);
    }
    80% {
      transform: translateX(10%);
    }
    100% {
      opacity: 1;
      transform: translateX(0%);
    }
  }

  // clearfix for floats
  @mixin clearfix {
    &::after {
      content: '';
      display: table;
      clear: both;
    }
  }
  // to center any element use '@includes absCenter' to include mixin
  @mixin absCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
